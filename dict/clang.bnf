# Verificar se o identificador já foi declarado no mesmo escopo
SINGLE_DECLARATION ::= TYPE id

# Verificar se algum dos identificadores já foi declarado no mesmo escopo
MULTIPLE_DECLARATION ::= DECLARATION , id
MULTIPLE_DECLARATION ::= DECLARATION_ASSIGNMENT , id
MULTIPLE_DECLARATION ::= FUNCTION_DECLARATION , id

# Para imitar o comportamento do compilador C
DECLARATION_ASSIGNMENT ::= DECLARATION = EXPRESSION
DECLARATION_ASSIGNMENT ::= FUNCTION_DECLARATION = EXPRESSION

DECLARATION ::= SINGLE_DECLARATION
DECLARATION ::= MULTIPLE_DECLARATION

TYPE_PRIMITIVE ::= void
TYPE_PRIMITIVE ::= int
TYPE_PRIMITIVE ::= double
TYPE_PRIMITIVE ::= float
TYPE_PRIMITIVE ::= char
TYPE_PRIMITIVE ::= signed
TYPE_PRIMITIVE ::= unsigned
TYPE_PRIMITIVE ::= short
TYPE_PRIMITIVE ::= long

# Verificar a compatibilidade de tipos
TYPE ::= TYPE_PRIMITIVE
TYPE ::= TYPE TYPE

# Verificar se a declaração possui um único identificador
FUNCTION_DECLARATION ::= DECLARATION ( )

FUNCTION_DEFINITION ::= FUNCTION_DECLARATION STATEMENT_BLOCK

STATEMENT ::= ;
STATEMENT ::= DECLARATION ;
STATEMENT ::= DECLARATION_ASSIGNMENT ;
STATEMENT ::= FUNCTION_DECLARATION ;
STATEMENT ::= FUNCTION_DEFINITION
STATEMENT ::= STATEMENT STATEMENT
STATEMENT ::= return ;
STATEMENT ::= return EXPRESSION ;

STATEMENT_BLOCK ::= { }
STATEMENT_BLOCK ::= { STATEMENT }
STATEMENT_BLOCK ::= { STATEMENT_BLOCK }
STATEMENT_BLOCK ::= { STATEMENT_BLOCK STATEMENT }
STATEMENT_BLOCK ::= { STATEMENT STATEMENT_BLOCK }
STATEMENT_BLOCK ::= LOOP_STATEMENT
STATEMENT_BLOCK ::= LOOP_DEFINITION
STATEMENT_BLOCK ::= STATEMENT_BLOCK STATEMENT_BLOCK

LOOP_STATEMENT ::= continue ;
LOOP_STATEMENT ::= break ;

LOOP_DECLARATION ::= WHILE

LOOP_DEFINITION ::= LOOP_DECLARATION EXPRESSION
LOOP_DEFINITION ::= LOOP_DECLARATION STATEMENT_BLOCK
LOOP_DEFINITION ::= LOOP_DECLARATION ;

EXPRESSION ::= id
EXPRESSION ::= number_literal
EXPRESSION ::= string_literal
EXPRESSION ::= char_literal
EXPRESSION ::= ( EXPRESSION )

WHILE_OPEN ::= while ( EXPRESSION
WHILE ::= WHILE_OPEN )
