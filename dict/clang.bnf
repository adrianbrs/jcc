IDENTIFIER ::= id

# Verificar se o identificador já foi declarado no mesmo escopo
SIMPLE_DECLARATION ::= TYPE IDENTIFIER

SIMPLE_DECLARATION_ASSIGNMENT ::= SIMPLE_DECLARATION = EXPRESSION

# Verificar se o identificador já foi declarado no mesmo escopo
COMPLEX_DECLARATION ::= SIMPLE_DECLARATION , IDENTIFIER
COMPLEX_DECLARATION ::= COMPLEX_DECLARATION , IDENTIFIER
COMPLEX_DECLARATION ::= COMPLEX_DECLARATION_ASSIGNMENT , IDENTIFIER

COMPLEX_DECLARATION_ASSIGNMENT ::= COMPLEX_DECLARATION = EXPRESSION

# Verificar se a função já foi declarada antes
FUNCTION_DECLARATION ::= SIMPLE_DECLARATION ( )
FUNCTION_DECLARATION ::= SIMPLE_DECLARATION ( SIMPLE_DECLARATION )
FUNCTION_DECLARATION ::= SIMPLE_DECLARATION ( SIMPLE_DECLARATION , ... )
FUNCTION_DECLARATION ::= SIMPLE_DECLARATION ( FUNCTION_DECLARATION_ARGUMENTS )
FUNCTION_DECLARATION ::= SIMPLE_DECLARATION ( FUNCTION_DECLARATION_ARGUMENTS , ... )

FUNCTION_DECLARATION_ARGUMENTS ::= SIMPLE_DECLARATION , SIMPLE_DECLARATION
FUNCTION_DECLARATION_ARGUMENTS ::= FUNCTION_DECLARATION_ARGUMENTS , SIMPLE_DECLARATION

FUNCTION_DEFINITION ::= FUNCTION_DECLARATION {  }
FUNCTION_DEFINITION ::= FUNCTION_DECLARATION { STATEMENT_LIST }

TYPE ::= void
TYPE ::= int
TYPE ::= double
TYPE ::= float
TYPE ::= char
TYPE ::= signed
TYPE ::= unsigned
TYPE ::= short
TYPE ::= long
TYPE ::= TYPE TYPE

STATEMENT_LIST ::= STATEMENT
STATEMENT_LIST ::= STATEMENT_LIST STATEMENT

STATEMENT ::= ;
STATEMENT ::= EXPRESSION ;
STATEMENT ::= SIMPLE_DECLARATION_ASSIGNMENT ;
STATEMENT ::= SIMPLE_DECLARATION ;
STATEMENT ::= COMPLEX_DECLARATION_ASSIGNMENT ;
STATEMENT ::= COMPLEX_DECLARATION ;

PRIMARY_EXPRESSION ::= IDENTIFIER
PRIMARY_EXPRESSION ::= number_literal
PRIMARY_EXPRESSION ::= string_literal
PRIMARY_EXPRESSION ::= char_literal
PRIMARY_EXPRESSION ::= ( EXPRESSION )

POSTFIX_EXPRESSION ::= PRIMARY_EXPRESSION
POSTFIX_EXPRESSION ::= POSTFIX_EXPRESSION [ EXPRESSION ]
POSTFIX_EXPRESSION ::= POSTFIX_EXPRESSION ( )
POSTFIX_EXPRESSION ::= POSTFIX_EXPRESSION . IDENTIFIER
POSTFIX_EXPRESSION ::= POSTFIX_EXPRESSION -> IDENTIFIER
POSTFIX_EXPRESSION ::= POSTFIX_EXPRESSION ++
POSTFIX_EXPRESSION ::= POSTFIX_EXPRESSION --

UNARY_EXPRESSION ::= POSTFIX_EXPRESSION
UNARY_EXPRESSION ::= ++ UNARY_EXPRESSION
UNARY_EXPRESSION ::= -- UNARY_EXPRESSION
UNARY_EXPRESSION ::= UNARY_OPERATOR UNARY_EXPRESSION

UNARY_OPERATOR ::= &
UNARY_OPERATOR ::= *
UNARY_OPERATOR ::= +
UNARY_OPERATOR ::= -
UNARY_OPERATOR ::= ~
UNARY_OPERATOR ::= !

MULTIPLICATIVE_EXPRESSION ::= UNARY_EXPRESSION
MULTIPLICATIVE_EXPRESSION ::= MULTIPLICATIVE_EXPRESSION * UNARY_EXPRESSION
MULTIPLICATIVE_EXPRESSION ::= MULTIPLICATIVE_EXPRESSION / UNARY_EXPRESSION
MULTIPLICATIVE_EXPRESSION ::= MULTIPLICATIVE_EXPRESSION % UNARY_EXPRESSION

ADDITIVE_EXPRESSION ::= MULTIPLICATIVE_EXPRESSION
ADDITIVE_EXPRESSION ::= ADDITIVE_EXPRESSION + MULTIPLICATIVE_EXPRESSION
ADDITIVE_EXPRESSION ::= ADDITIVE_EXPRESSION - MULTIPLICATIVE_EXPRESSION

SHIFT_EXPRESSION ::= ADDITIVE_EXPRESSION
SHIFT_EXPRESSION ::= SHIFT_EXPRESSION << ADDITIVE_EXPRESSION
SHIFT_EXPRESSION ::= SHIFT_EXPRESSION >> ADDITIVE_EXPRESSION

RELATIONAL_EXPRESSION ::= SHIFT_EXPRESSION
RELATIONAL_EXPRESSION ::= RELATIONAL_EXPRESSION < SHIFT_EXPRESSION
RELATIONAL_EXPRESSION ::= RELATIONAL_EXPRESSION > SHIFT_EXPRESSION
RELATIONAL_EXPRESSION ::= RELATIONAL_EXPRESSION <= SHIFT_EXPRESSION
RELATIONAL_EXPRESSION ::= RELATIONAL_EXPRESSION >= SHIFT_EXPRESSION

EQUALITY_EXPRESSION ::= RELATIONAL_EXPRESSION
EQUALITY_EXPRESSION ::= EQUALITY_EXPRESSION == RELATIONAL_EXPRESSION
EQUALITY_EXPRESSION ::= EQUALITY_EXPRESSION != RELATIONAL_EXPRESSION

AND_EXPRESSION ::= EQUALITY_EXPRESSION
AND_EXPRESSION ::= AND_EXPRESSION & EQUALITY_EXPRESSION

EXCLUSIVE_OR_EXPRESSION ::= AND_EXPRESSION
EXCLUSIVE_OR_EXPRESSION ::= EXCLUSIVE_OR_EXPRESSION ^ AND_EXPRESSION

INCLUSIVE_OR_EXPRESSION ::= EXCLUSIVE_OR_EXPRESSION
INCLUSIVE_OR_EXPRESSION ::= INCLUSIVE_OR_EXPRESSION | EXCLUSIVE_OR_EXPRESSION

LOGICAL_AND_EXPRESSION ::= INCLUSIVE_OR_EXPRESSION
LOGICAL_AND_EXPRESSION ::= LOGICAL_AND_EXPRESSION && INCLUSIVE_OR_EXPRESSION

LOGICAL_OR_EXPRESSION ::= LOGICAL_AND_EXPRESSION
LOGICAL_OR_EXPRESSION ::= LOGICAL_OR_EXPRESSION || LOGICAL_AND_EXPRESSION

CONDITIONAL_EXPRESSION ::= LOGICAL_OR_EXPRESSION
CONDITIONAL_EXPRESSION ::= LOGICAL_OR_EXPRESSION ? EXPRESSION : CONDITIONAL_EXPRESSION

ASSIGNMENT_EXPRESSION ::= CONDITIONAL_EXPRESSION
ASSIGNMENT_EXPRESSION ::= UNARY_EXPRESSION = ASSIGNMENT_EXPRESSION
ASSIGNMENT_EXPRESSION ::= UNARY_EXPRESSION ASSIGNMENT_OPERATOR ASSIGNMENT_EXPRESSION
ASSIGNMENT_EXPRESSION ::= IDENTIFIER ASSIGNMENT_OPERATOR EXPRESSION

ASSIGNMENT_OPERATOR ::= *=
ASSIGNMENT_OPERATOR ::= /=
ASSIGNMENT_OPERATOR ::= %=
ASSIGNMENT_OPERATOR ::= +=
ASSIGNMENT_OPERATOR ::= -=
ASSIGNMENT_OPERATOR ::= <<=
ASSIGNMENT_OPERATOR ::= >>=
ASSIGNMENT_OPERATOR ::= &=
ASSIGNMENT_OPERATOR ::= ^=
ASSIGNMENT_OPERATOR ::= |=

EXPRESSION ::= ASSIGNMENT_EXPRESSION
EXPRESSION ::= EXPRESSION , ASSIGNMENT_EXPRESSION