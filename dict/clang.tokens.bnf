4000 ::= 2000 # IDENTIFIER ::= id

# Verificar se o identificador já foi declarado no mesmo escopo
4001 ::= 4002 4000 # SIMPLE_DECLARATION ::= TYPE IDENTIFIER

4003 ::= 4001 3011 4004 # SIMPLE_DECLARATION_ASSIGNMENT ::= SIMPLE_DECLARATION = EXPRESSION

# Verificar se o identificador já foi declarado no mesmo escopo
4005 ::= 4001 3008 4000 # COMPLEX_DECLARATION ::= SIMPLE_DECLARATION , IDENTIFIER
4005 ::= 4005 3008 4000 # COMPLEX_DECLARATION ::= COMPLEX_DECLARATION , IDENTIFIER
4005 ::= 4006 3008 4000 # COMPLEX_DECLARATION ::= COMPLEX_DECLARATION_ASSIGNMENT , IDENTIFIER

4006 ::= 4005 3011 4004 # COMPLEX_DECLARATION_ASSIGNMENT ::= COMPLEX_DECLARATION = EXPRESSION

# Verificar se a função já foi declarada antes
4007 ::= 4001 3004 3005 # FUNCTION_DECLARATION ::= SIMPLE_DECLARATION ( )
4007 ::= 4001 3004 4001 3005 # FUNCTION_DECLARATION ::= SIMPLE_DECLARATION ( SIMPLE_DECLARATION )
4007 ::= 4001 3004 4001 3008 3007 3007 3007 3005 # FUNCTION_DECLARATION ::= SIMPLE_DECLARATION ( SIMPLE_DECLARATION , ... )
4007 ::= 4001 3004 4008 3005 # FUNCTION_DECLARATION ::= SIMPLE_DECLARATION ( FUNCTION_DECLARATION_ARGUMENTS )
4007 ::= 4001 3004 4008 3008 3007 3007 3007 3005 # FUNCTION_DECLARATION ::= SIMPLE_DECLARATION ( FUNCTION_DECLARATION_ARGUMENTS , ... )

4008 ::= 4001 3008 4001 # FUNCTION_DECLARATION_ARGUMENTS ::= SIMPLE_DECLARATION , SIMPLE_DECLARATION
4008 ::= 4008 3008 4001 # FUNCTION_DECLARATION_ARGUMENTS ::= FUNCTION_DECLARATION_ARGUMENTS , SIMPLE_DECLARATION

4009 ::= 4007 3000 3001 # FUNCTION_DEFINITION ::= FUNCTION_DECLARATION {  }
4009 ::= 4007 3000 4010 3001 # FUNCTION_DEFINITION ::= FUNCTION_DECLARATION { STATEMENT_LIST }

4002 ::= 1031 # TYPE ::= void
4002 ::= 1017 # TYPE ::= int
4002 ::= 1008 # TYPE ::= double
4002 ::= 1012 # TYPE ::= float
4002 ::= 1003 # TYPE ::= char
4002 ::= 1023 # TYPE ::= signed
4002 ::= 1030 # TYPE ::= unsigned
4002 ::= 1022 # TYPE ::= short
4002 ::= 1018 # TYPE ::= long
4002 ::= 4002 4002 # TYPE ::= TYPE TYPE

4010 ::= 4011 # STATEMENT_LIST ::= STATEMENT
4010 ::= 4010 4011 # STATEMENT_LIST ::= STATEMENT_LIST STATEMENT

4011 ::= 3009 # STATEMENT ::= ;
4011 ::= 4004 3009 # STATEMENT ::= EXPRESSION ;
4011 ::= 4003 3009 # STATEMENT ::= SIMPLE_DECLARATION_ASSIGNMENT ;
4011 ::= 4001 3009 # STATEMENT ::= SIMPLE_DECLARATION ;
4011 ::= 4006 3009 # STATEMENT ::= COMPLEX_DECLARATION_ASSIGNMENT ;
4011 ::= 4005 3009 # STATEMENT ::= COMPLEX_DECLARATION ;

4012 ::= 4000 # PRIMARY_EXPRESSION ::= IDENTIFIER
4012 ::= 2001 # PRIMARY_EXPRESSION ::= number_literal
4012 ::= 2002 # PRIMARY_EXPRESSION ::= string_literal
4012 ::= 2003 # PRIMARY_EXPRESSION ::= char_literal
4012 ::= 3004 4004 3005 # PRIMARY_EXPRESSION ::= ( EXPRESSION )

4013 ::= 4012 # POSTFIX_EXPRESSION ::= PRIMARY_EXPRESSION
4013 ::= 4013 3002 4004 3003 # POSTFIX_EXPRESSION ::= POSTFIX_EXPRESSION [ EXPRESSION ]
4013 ::= 4013 3004 3005 # POSTFIX_EXPRESSION ::= POSTFIX_EXPRESSION ( )
4013 ::= 4013 3007 4000 # POSTFIX_EXPRESSION ::= POSTFIX_EXPRESSION . IDENTIFIER
4013 ::= 4013 3020 3037 4000 # POSTFIX_EXPRESSION ::= POSTFIX_EXPRESSION -> IDENTIFIER
4013 ::= 4013 3024 # POSTFIX_EXPRESSION ::= POSTFIX_EXPRESSION ++
4013 ::= 4013 3025 # POSTFIX_EXPRESSION ::= POSTFIX_EXPRESSION --

4014 ::= 4013 # UNARY_EXPRESSION ::= POSTFIX_EXPRESSION
4014 ::= 3024 4014 # UNARY_EXPRESSION ::= ++ UNARY_EXPRESSION
4014 ::= 3025 4014 # UNARY_EXPRESSION ::= -- UNARY_EXPRESSION
4014 ::= 4015 4014 # UNARY_EXPRESSION ::= UNARY_OPERATOR UNARY_EXPRESSION

4015 ::= 3026 # UNARY_OPERATOR ::= &
4015 ::= 3021 # UNARY_OPERATOR ::= *
4015 ::= 3019 # UNARY_OPERATOR ::= +
4015 ::= 3020 # UNARY_OPERATOR ::= -
4015 ::= 3029 # UNARY_OPERATOR ::= ~
4015 ::= 3042 # UNARY_OPERATOR ::= !

4016 ::= 4014 # MULTIPLICATIVE_EXPRESSION ::= UNARY_EXPRESSION
4016 ::= 4016 3021 4014 # MULTIPLICATIVE_EXPRESSION ::= MULTIPLICATIVE_EXPRESSION * UNARY_EXPRESSION
4016 ::= 4016 3022 4014 # MULTIPLICATIVE_EXPRESSION ::= MULTIPLICATIVE_EXPRESSION / UNARY_EXPRESSION
4016 ::= 4016 3023 4014 # MULTIPLICATIVE_EXPRESSION ::= MULTIPLICATIVE_EXPRESSION % UNARY_EXPRESSION

4017 ::= 4016 # ADDITIVE_EXPRESSION ::= MULTIPLICATIVE_EXPRESSION
4017 ::= 4017 3019 4016 # ADDITIVE_EXPRESSION ::= ADDITIVE_EXPRESSION + MULTIPLICATIVE_EXPRESSION
4017 ::= 4017 3020 4016 # ADDITIVE_EXPRESSION ::= ADDITIVE_EXPRESSION - MULTIPLICATIVE_EXPRESSION

4018 ::= 4017 # SHIFT_EXPRESSION ::= ADDITIVE_EXPRESSION
4018 ::= 4018 3030 4017 # SHIFT_EXPRESSION ::= SHIFT_EXPRESSION << ADDITIVE_EXPRESSION
4018 ::= 4018 3031 4017 # SHIFT_EXPRESSION ::= SHIFT_EXPRESSION >> ADDITIVE_EXPRESSION

4019 ::= 4018 # RELATIONAL_EXPRESSION ::= SHIFT_EXPRESSION
4019 ::= 4019 3036 4018 # RELATIONAL_EXPRESSION ::= RELATIONAL_EXPRESSION < SHIFT_EXPRESSION
4019 ::= 4019 3037 4018 # RELATIONAL_EXPRESSION ::= RELATIONAL_EXPRESSION > SHIFT_EXPRESSION
4019 ::= 4019 3038 4018 # RELATIONAL_EXPRESSION ::= RELATIONAL_EXPRESSION <= SHIFT_EXPRESSION
4019 ::= 4019 3039 4018 # RELATIONAL_EXPRESSION ::= RELATIONAL_EXPRESSION >= SHIFT_EXPRESSION

4020 ::= 4019 # EQUALITY_EXPRESSION ::= RELATIONAL_EXPRESSION
4020 ::= 4020 3034 4019 # EQUALITY_EXPRESSION ::= EQUALITY_EXPRESSION == RELATIONAL_EXPRESSION
4020 ::= 4020 3035 4019 # EQUALITY_EXPRESSION ::= EQUALITY_EXPRESSION != RELATIONAL_EXPRESSION

4021 ::= 4020 # AND_EXPRESSION ::= EQUALITY_EXPRESSION
4021 ::= 4021 3026 4020 # AND_EXPRESSION ::= AND_EXPRESSION & EQUALITY_EXPRESSION

4022 ::= 4021 # EXCLUSIVE_OR_EXPRESSION ::= AND_EXPRESSION
4022 ::= 4022 3028 4021 # EXCLUSIVE_OR_EXPRESSION ::= EXCLUSIVE_OR_EXPRESSION ^ AND_EXPRESSION

4023 ::= 4022 # INCLUSIVE_OR_EXPRESSION ::= EXCLUSIVE_OR_EXPRESSION
4023 ::= 4023 3027 4022 # INCLUSIVE_OR_EXPRESSION ::= INCLUSIVE_OR_EXPRESSION | EXCLUSIVE_OR_EXPRESSION

4024 ::= 4023 # LOGICAL_AND_EXPRESSION ::= INCLUSIVE_OR_EXPRESSION
4024 ::= 4024 3040 4023 # LOGICAL_AND_EXPRESSION ::= LOGICAL_AND_EXPRESSION && INCLUSIVE_OR_EXPRESSION

4025 ::= 4024 # LOGICAL_OR_EXPRESSION ::= LOGICAL_AND_EXPRESSION
4025 ::= 4025 3041 4024 # LOGICAL_OR_EXPRESSION ::= LOGICAL_OR_EXPRESSION || LOGICAL_AND_EXPRESSION

4026 ::= 4025 # CONDITIONAL_EXPRESSION ::= LOGICAL_OR_EXPRESSION
4026 ::= 4025 3006 4004 3010 4026 # CONDITIONAL_EXPRESSION ::= LOGICAL_OR_EXPRESSION ? EXPRESSION : CONDITIONAL_EXPRESSION

4027 ::= 4026 # ASSIGNMENT_EXPRESSION ::= CONDITIONAL_EXPRESSION
4027 ::= 4014 3011 4027 # ASSIGNMENT_EXPRESSION ::= UNARY_EXPRESSION = ASSIGNMENT_EXPRESSION
4027 ::= 4014 4028 4027 # ASSIGNMENT_EXPRESSION ::= UNARY_EXPRESSION ASSIGNMENT_OPERATOR ASSIGNMENT_EXPRESSION
4027 ::= 4000 4028 4004 # ASSIGNMENT_EXPRESSION ::= IDENTIFIER ASSIGNMENT_OPERATOR EXPRESSION

4028 ::= 3014 # ASSIGNMENT_OPERATOR ::= *=
4028 ::= 3015 # ASSIGNMENT_OPERATOR ::= /=
4028 ::= 3016 # ASSIGNMENT_OPERATOR ::= %=
4028 ::= 3012 # ASSIGNMENT_OPERATOR ::= +=
4028 ::= 3013 # ASSIGNMENT_OPERATOR ::= -=
4028 ::= 3032 # ASSIGNMENT_OPERATOR ::= <<=
4028 ::= 3033 # ASSIGNMENT_OPERATOR ::= >>=
4028 ::= 3017 # ASSIGNMENT_OPERATOR ::= &=
4028 ::= 3043 # ASSIGNMENT_OPERATOR ::= ^=
4028 ::= 3018 # ASSIGNMENT_OPERATOR ::= |=

4004 ::= 4027 # EXPRESSION ::= ASSIGNMENT_EXPRESSION
4004 ::= 4004 3008 4027 # EXPRESSION ::= EXPRESSION , ASSIGNMENT_EXPRESSION